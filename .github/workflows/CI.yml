name: CI
on: [push, pull_request]

jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [fpm, meson]
        os: [ubuntu-latest, macos-latest, windows-latest]
        gcc: [10] # Version of GFortran we want to use.
    defaults:
      run:
        shell: ${{ contains(matrix.os, 'windows') && 'powershell' || 'bash -l {0}' }}
    env:
      FC: gfortran
      CC: gcc
      FPM_FC: gfortran
      FPM_CC: gcc
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install GFortran (MacOS)
      if: ${{ contains(matrix.os, 'macos') }}
      run: |
        brew install gcc@${{ matrix.gcc }}
        ln -s /usr/local/bin/gfortran-${{ matrix.gcc }} /usr/local/bin/gfortran
        ln -s /usr/local/bin/gcc-${{ matrix.gcc }} /usr/local/bin/gcc

    - name: Install GFortran (Linux)
      if: ${{ contains(matrix.os, 'ubuntu') }}
      run: |
        sudo update-alternatives \
          --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.gcc }} 100 \
          --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ matrix.gcc }} \
          --slave /usr/bin/gcov gcov /usr/bin/gcov-${{ matrix.gcc }}

    - name: Install GFortran (Windows)
      if: ${{ contains(matrix.os, 'windows') }}
      run: |
        Invoke-WebRequest -Uri ${{ env.DOWNLOAD }} -OutFile mingw-w64.zip
        Expand-Archive mingw-w64.zip
        echo "$pwd\mingw-w64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh
      env:
        DOWNLOAD: "https://github.com/brechtsanders/winlibs_mingw/releases/download/10.3.0-12.0.0-9.0.0-r2/winlibs-x86_64-posix-seh-gcc-10.3.0-mingw-w64-9.0.0-r2.zip"

    - name: Install dependencies
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-file: config/ci/${{ matrix.build }}-env.yaml

    - name: Compile (fpm)
      if: ${{ matrix.build == 'fpm' }}
      run: fpm build --profile release

    - name: Run test (fpm)
      if: ${{ matrix.build == 'fpm' }}
      run: fpm test

    - name: Run examples (fpm)
      if: ${{ matrix.build == 'fpm' }}
      run: fpm run --example --all

    - name: Setup build (meson)
      if: ${{ matrix.build == 'meson' }}
      run: >-
        meson setup _build
        --prefix=${{ contains(matrix.os, 'windows') && '$pwd\_dist' || '$PWD/_dist' }}

    - name: Compile project (meson)
      if: ${{ matrix.build == 'meson' }}
      run: meson compile -C _build

    - name: Run testsuite (meson)
      if: ${{ matrix.build == 'meson' }}
      run: meson test -C _build --no-rebuild --print-errorlogs

    - name: Install project (meson)
      if: ${{ matrix.build == 'meson' }}
      run: meson install -C _build --no-rebuild

  Docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - id: deploy-on-push
      run:
        echo "::set-output name=result::${{ env.DEPLOY_BRANCH }}"
      env:
        DEPLOY_BRANCH: ${{ secrets.DEPLOY_BRANCH && contains(github.ref, secrets.DEPLOY_BRANCH) && 1 || 0 }}

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install dependencies
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-file: config/ci/docs-env.yaml

    - name: Build documentation
      run: ford ./minpack.md

    - name: Deploy Documentation
      if: ${{ github.event_name == 'push' && steps.deploy-on-push.outputs.result != 0 }}
      uses: JamesIves/github-pages-deploy-action@4.1.0
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder: doc  # The folder the action should deploy.
